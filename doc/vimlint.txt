*vimlint.txt* A lint for vim script

Version: 0.1.0
Author : syngan
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}


CONTENTS						*vimlint-contents*

INTRODUCTION						|vimlint-introduction|
INTERFACE		 				|vimlint-interface|
  FUNCTIONS						|vimlint-functions|
ERROR CODE						|vimlint-errorcode|

==============================================================================
INTRODUCTION						*vimlint-introduction*

==============================================================================
INTERFACE						*vimlint-interface*

------------------------------------------------------------------------------
VARIABLES 						*vimlint-variables*
							*g:vimlint#config*

You can define default values by |g:vimlint#config|.
|g:vimlint#config| is a |Dictionary| which contains the following items:

	"output"		Default: None
		The value is a |String|, a |List| or a |Funcref|.
		If the value is a |String|, |vimlint| outputs the result to
		the file by using vimlint#util#output_file().
		If the value is a |List|, |vimlint| returns the list of
		the results by using vimlint#util#output_list().

	"recursive"		Default: 1
	"quiet"			Default: 0
	"EVLxxx"		Default: 5
		The value is a positive |Number| or a |Dictionary|.

		1: none
		3: warning message
		5: error message

		If you want not to report "|EVL103|: unused argument v" for all
		variables, then >
		let g:vimlint#config.EVL103 = 1
<		or >
		let g:vimlint#config.EVL103 = {':' : 1}
<
		If you want not to report "|EVL103|" only for the variable
		'hoge', then >
		let g:vimlint#config.EVL103 = {'hoge' : 1}
<
------------------------------------------------------------------------------
FUNCTIONS 						*vimlint-functions*

vimlint#vimlint({input} [, {param}])			*vimlint#vimlint()*

{input} is a filename or a directory.
{param} is a |Dictionary|. See |g:vimlint#config|.


==============================================================================
ERROR CODE 						*vimlint-errorcode*

EVPxxx:          error message by |vim-vimplarser|.
EVLxxx and Exxx: error message by |vim-vimlint|.

|E46|:  Cannot change read-only variable `v`
|E117|: Unknown function: `func`
|E118|: Too many arguments for function: `func`
|E119|: Not enough arguments for function: `func`
|E133|: :return not inside a function
|E586|: :continue without :while or :for: continue
|E587|: :break without :while or :for: break
|E714|: List required
|E731|: using Dictionary as a String

variable
EVL101: undefined variable `v`					*EVL101*
>
	    function! Incorrect()
	        echo v
	    endif
	    function! Correct()
		let v = 1
		echo v
	    endif
	    " @vimlint(EVL101, 1, l:v)
	    function! AvoidError()
		echo v
	    endif
	    " @vimlint(EVL101, 0, l:v)
<
EVL102: unused variable `v`					*EVL102*
>
	    function! Incorrect()
		let a = 1
		let b = 2
		echo b
	    endif
	    function! Correct()
		let b = 2
		echo b
	    endif
	    " @vimlint(EVL102, 1, l:a)
	    function! AvoidError()
		let a = 1
		let b = 2
		echo b
	    endif
	    " @vimlint(EVL103, 0, l:a)
<
EVL103: unused argument `v`					*EVL103*
>
	    function! Incorrect(v)
	        return 0
	    endif
	    function! Correct()
		return 0
	    endif
	    " @vimlint(EVL103, 1, a:v)
	    function! AvoidError(v)
		return 0
	    endif
	    " @vimlint(EVL103, 0, a:v)
<
								*EVL104*
EVL104: variable may not be initialized on some execution path: `v`
>
	    function! Incorrect(b)
		if a:b
		    let v = 1
		endif
	        return v
	    endif
	    function! Correct()
		if a:b
		    let v = 1
		else
		    let v = 2
		endif
		return v
	    endif
	    " @vimlint(EVL104, 1, l:v)
	    function! Incorrect(b)
		if a:b
		    let v = 1
		endif
		return v
	    endif
	    " @vimlint(EVL104, 0, l:v)
<
								*EVL105*
EVL105: global variable `v` is defined without g:
EVL106: local variable `v` is used without l:			*EVL106*
	See |v:count| and |local-variable|.
>
	    function! Incorrect()
	        let count = 1
	    endif
	    function! Correct()
	        let l:count = 1
	    endif
<
EVL107: A function name does not allowd to contain a colon: `v`	*EVL107*
>
	    function! g:incorrect()
	        return 0
	    endif
	    function! Correct()
	        return 1
	    endif
<

EVL108: `n`th argument of `v` should be `xxx`			*EVL108*

EVL109: local variable `v` is used outside of a function	*EVL109*


code
EVL201: unreachable code `return/throw`				*EVL201*
EVL201: unreachable code `continue/break`
EVL202: missing call `s`					*EVL202*
EVL203: parse error in `cmd`					*EVL203*
EVL204: constant in conditional context				*EVL204*
>
	    if 1
		" incorrect
	    endif
	    @vimlint(EVL204, 1)
	    if 1
	    @vimlint(EVL204, 0)
	        " avoid error
	    endif 1
<
EVL205: missing scriptencoding					*EVL205*

system error
EVL901: unknown type `t`					*EVL901*
EVL902: assert error `t`					*EVL902*

==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
